
// const PDFDocument = require('pdfkit');
// const { uploadToS3,getPublicFileUrl } = require('../config/s3Upload');
// const logger = require('../utils/logger');
// const { getOwnerConnection } = require('../config/database');

// const generateFeeSlip = async (student, payment, fees, schoolId, monthYear) => {
//     try {
//       // Fetch school name if not already available
//       let schoolName;
//       if (payment.schoolName) {
//         schoolName = payment.schoolName;
//       } else {
//         // Get school from owner connection
//         const ownerConnection = getOwnerConnection();
//         if (!ownerConnection) {
//           throw new Error("Owner database connection is not initialized");
//         }
        
//         const School = ownerConnection.model('School', require('../models/School')(ownerConnection).schema);
//         const school = await School.findById(schoolId).lean();
//         if (!school) {
//           throw new Error(`School not found for ID: ${schoolId}`);
//         }
//         schoolName = school.name;
//       }
      
//       const doc = new PDFDocument({ size: 'A4', margin: 50 });
//       const buffers = [];
      
//       doc.on('data', buffers.push.bind(buffers));
//       doc.on('end', () => {});
  
//       // School Name at top
//       doc.fontSize(22).text(schoolName, { align: 'center' });
//       doc.moveDown(0.5);
      
//       // Header
//       doc.fontSize(20).text('Fee Receipt', { align: 'center' });
//       doc.moveDown();
//       doc.fontSize(12).text(`Receipt Number: ${payment.receiptNumber}`, { align: 'left' });
//       doc.text(`Date: ${new Date(payment.paymentDate).toLocaleDateString()}`, { align: 'left' });
//       doc.moveDown();
  
//       // Student Details
//       doc.fontSize(14).text('Student Details', { underline: true });
//       doc.fontSize(12)
//         .text(`Name: ${student.name}`)
//         .text(`GR Number: ${student.studentDetails.grNumber}`)
//         .text(`Class: ${student.studentDetails.class?.name || 'N/A'} - ${student.studentDetails.class?.division || 'N/A'}`);
//       doc.moveDown();
  
//       // Fee Details
//       doc.fontSize(14).text('Fee Details', { underline: true });
//       doc.fontSize(12);
//       let total = 0;
//       fees.forEach((fee) => {
//         const amount = fee.amount || fee.paidAmount;
//         total += amount;
//         doc.text(`${fee.type.toUpperCase()} Fee (${fee.month}/${fee.year}): ₹${amount}`);
//       });
//       doc.moveDown();
//       doc.fontSize(14).text(`Total: ₹${total}`, { align: 'right' });
  
//       // Footer
//       doc.moveDown(2);
//       doc.fontSize(10).text(`Generated by ${schoolName} Management System`, { align: 'center' });
  
//       doc.end();
  
//       // Convert PDF to buffer
//       const pdfBuffer = await new Promise((resolve) => {
//         const chunks = [];
//         doc.on('data', (chunk) => chunks.push(chunk));
//         doc.on('end', () => resolve(Buffer.concat(chunks)));
//       });
  
//       // Upload to S3
//       const fileKey = `fee_receipts/${schoolId}/receipt_FS-${payment.receiptNumber}.pdf`;
//       const uploadResult = await uploadToS3(pdfBuffer, fileKey, 'application/pdf');
  
//       console.log(`Fee slip generated for ${schoolName} - ${monthYear}: ${fileKey}`);
//       return { pdfUrl: uploadResult.Location };
//     } catch (error) {
//       console.error(`Error generating fee slip: ${error.message}`, error);
//       throw error;
//     }
//   };
  
//   module.exports = { generateFeeSlip };


const PDFDocument = require('pdfkit');
const { uploadToS3, getPublicFileUrl } = require('../config/s3Upload');
const logger = require('../utils/logger');
const { getOwnerConnection } = require('../config/database');

const generateFeeSlip = async (student, payment, fees, schoolId, monthYear) => {
  try {
    // Fetch school name if not already available
    let schoolName;
    if (payment.schoolName) {
      schoolName = payment.schoolName;
    } else {
      // Get school from owner connection
      const ownerConnection = getOwnerConnection();
      if (!ownerConnection) {
        throw new Error("Owner database connection is not initialized");
      }
      
      const School = ownerConnection.model('School', require('../models/School')(ownerConnection).schema);
      const school = await School.findById(schoolId).lean();
      if (!school) {
        throw new Error(`School not found for ID: ${schoolId}`);
      }
      schoolName = school.name;
    }
    
    const doc = new PDFDocument({ size: 'A4', margin: 50 });
    const buffers = [];
    
    doc.on('data', buffers.push.bind(buffers));
    doc.on('end', () => {});

    // School Name at top
    doc.fontSize(22).text(schoolName, { align: 'center' });
    doc.moveDown(0.5);
    
    // Header
    doc.fontSize(20).text('Fee Receipt', { align: 'center' });
    doc.moveDown();
    doc.fontSize(12).text(`Receipt Number: ${payment.receiptNumber}`, { align: 'left' });
    doc.text(`Date: ${new Date(payment.paymentDate).toLocaleDateString()}`, { align: 'left' });
    doc.moveDown();

    // Student Details
    doc.fontSize(14).text('Student Details', { underline: true });
    doc.fontSize(12)
      .text(`Name: ${student.name}`)
      .text(`GR Number: ${student.studentDetails.grNumber}`)
      .text(`Class: ${student.studentDetails.class?.name || 'N/A'} - ${student.studentDetails.class?.division || 'N/A'}`);
    doc.moveDown();

    // Fee Details
    doc.fontSize(14).text('Fee Details', { underline: true });
    doc.fontSize(12);
    let total = 0;
    fees.forEach((fee) => {
      const amount = fee.amount || fee.paidAmount;
      total += amount;
      doc.text(`${fee.type.toUpperCase()} Fee (${fee.month}/${fee.year}): ₹${amount}`);
    });
    doc.moveDown();
    doc.fontSize(14).text(`Total: ₹${total}`, { align: 'right' });

    // Footer
    doc.moveDown(2);
    doc.fontSize(10).text(`Generated by ${schoolName} Management System`, { align: 'center' });

    doc.end();

    // Convert PDF to buffer
    const pdfBuffer = await new Promise((resolve) => {
      const chunks = [];
      doc.on('data', (chunk) => chunks.push(chunk));
      doc.on('end', () => resolve(Buffer.concat(chunks)));
    });

    // Upload to S3 with public-read ACL
    const fileKey = `fee_receipts/${schoolId}/receipt_FS-${payment.receiptNumber}.pdf`;
    await uploadToS3(pdfBuffer, fileKey, 'application/pdf');
    
    // Generate a direct, permanent URL instead of using S3's location property
    const pdfUrl = getPublicFileUrl(fileKey);
    
    logger.info(`Fee slip generated for ${schoolName} - ${monthYear}: ${fileKey}`);
    return { pdfUrl };
  } catch (error) {
    logger.error(`Error generating fee slip: ${error.message}`, error);
    throw error;
  }
};

module.exports = { generateFeeSlip };